{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/strict"
  ],
  "overrides": [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": ["./tsconfig.json"]
  },
  "plugins": ["@typescript-eslint"],
  "rules": {
    "indent": ["error", 2],
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "double"],
    "semi": ["error", "always"],
    "eqeqeq": "error",
    "default-case": "error",
    "use-isnan": "error",
    "no-else-return": "error",
    "prefer-const": "error",
    "quote-props": "error",
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/array-type": ["error", { "default": "generic" }],
    "@typescript-eslint/await-thenable": ["error"],
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": "allow-with-description",
        "ts-ignore": true,
        "ts-nocheck": true,
        "ts-check": true,
        "minimumDescriptionLength": 0
      }
    ],
    "@typescript-eslint/ban-tslint-comment": "error",
    "@typescript-eslint/ban-types": "error",
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    // "@typescript-eslint/consistent-type-exports": ["error"]
    "@typescript-eslint/explicit-function-return-type": ["error"],
    "@typescript-eslint/method-signature-style": ["error", "property"],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "typeLike",
        "format": ["UPPER_CASE"]
        // "suffix": ["Props"]  // Need to discuss with the team
      },
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "should", "has", "can", "did", "will"]
      },
      {
        "selector": "variable",
        "modifiers": ["destructured"],
        "format": null
      },
      {
        "selector": "property",
        "format": ["PascalCase"],
        "filter": {
          "regex": "[-]",
          "match": true
        }
      }
      // {
      //   "selector": "variable",
      //   "modifiers": ["unused", "const"],
      //   "leadingUnderscore": "require"
      // }
      // {
      //   "selector": "variable",
      //   "format": ["camelCase", "UPPER_CASE"],
      //   "leadingUnderscore": "allow",
      //   "trailingUnderscore": "allow"
      // }
    ],
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-confusing-void-expression": "error",
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-explicit-any": "warn", // discuss when to make it error from warn
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/prefer-ts-expect-error": "error", // need to R&D in how to use @ts-expect-error
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "no-empty-function": "off",
    "@typescript-eslint/no-empty-function": "error",
    "no-extra-semi": "off",
    "@typescript-eslint/no-extra-semi": "error",
    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": "error",
    "no-throw-literal": "off",
    "@typescript-eslint/no-throw-literal": "error",
    "require-await": "off",
    "@typescript-eslint/require-await": "error"
  }
}
